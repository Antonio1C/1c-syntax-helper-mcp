"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ MCP –∑–∞–ø—Ä–æ—Å–æ–≤."""

from src.models.mcp_models import (
    MCPResponse, Find1CHelpRequest, GetSyntaxInfoRequest, GetQuickReferenceRequest,
    SearchByContextRequest, ListObjectMembersRequest
)
from src.search.search_service import search_service
from src.handlers.mcp_formatter import mcp_formatter
from src.core.logging import get_logger

logger = get_logger(__name__)


def _log_mcp_request(tool_name: str, **context):
    """–õ–æ–≥–∏—Ä—É–µ—Ç MCP –∑–∞–ø—Ä–æ—Å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º."""
    logger.debug(f"MCP –∑–∞–ø—Ä–æ—Å: {tool_name}", extra={"extra_data": {"tool": tool_name, **context}})


def _log_mcp_success(tool_name: str, count: int = None, **context):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—ã–π MCP –æ—Ç–≤–µ—Ç."""
    extra = {"tool": tool_name, "status": "success", **context}
    if count is not None:
        extra["results_count"] = count
    logger.debug(f"MCP —É—Å–ø–µ—Ö: {tool_name}", extra={"extra_data": extra})


def _log_mcp_error(tool_name: str, error: str, **context):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É MCP –∑–∞–ø—Ä–æ—Å–∞."""
    logger.error(f"MCP –æ—à–∏–±–∫–∞: {tool_name} - {error}", 
                extra={"extra_data": {"tool": tool_name, "status": "error", "error": error, **context}})


async def handle_find_1c_help(request: Find1CHelpRequest) -> MCPResponse:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –ª—é–±–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É 1–°."""
    _log_mcp_request("find_1c_help", query=request.query, limit=request.limit)
    
    try:
        results = await search_service.find_help_by_query(request.query, request.limit)
        
        if results.get("error"):
            _log_mcp_error("find_1c_help", results["error"])
            return mcp_formatter.create_error_response("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞", results["error"])
        
        search_results = results.get("results", [])
        
        if not search_results:
            _log_mcp_success("find_1c_help", count=0)
            return mcp_formatter.create_not_found_response(request.query)
        
        content = [mcp_formatter.format_search_header(len(search_results), request.query)]
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for i, result in enumerate(search_results, 1):
            content.append(mcp_formatter.format_search_result(result, i))
        
        _log_mcp_success("find_1c_help", count=len(search_results))
        return mcp_formatter.create_success_response(content)
        
    except Exception as e:
        _log_mcp_error("find_1c_help", str(e))
        return mcp_formatter.create_error_response("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞", str(e))


async def handle_get_syntax_info(request: GetSyntaxInfoRequest) -> MCPResponse:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ."""
    _log_mcp_request("get_syntax_info", element_name=request.element_name, 
                    object_name=request.object_name, include_examples=request.include_examples)
    
    try:
        result = await search_service.get_detailed_syntax_info(
            request.element_name, 
            request.object_name, 
            request.include_examples
        )
        
        if not result:
            element_context = f" –æ–±—ä–µ–∫—Ç–∞ '{request.object_name}'" if request.object_name else ""
            _log_mcp_success("get_syntax_info", count=0)
            return mcp_formatter.create_not_found_response(f"–≠–ª–µ–º–µ–Ω—Ç '{request.element_name}'{element_context}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        text = mcp_formatter.format_syntax_info(result)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if request.include_examples and result.get('examples'):
            examples = result['examples']
            if isinstance(examples, list) and examples:
                text += "üí° **–ü—Ä–∏–º–µ—Ä—ã:**\n"
                for example in examples[:2]:  # –ú–∞–∫—Å–∏–º—É–º 2 –ø—Ä–∏–º–µ—Ä–∞
                    text += f"   ```\n   {example}\n   ```\n"
        
        _log_mcp_success("get_syntax_info", count=1, has_examples=bool(result.get('examples')))
        return mcp_formatter.create_success_response([{
            "type": "text",
            "text": text
        }])
        
    except Exception as e:
        _log_mcp_error("get_syntax_info", str(e))
        return mcp_formatter.create_error_response("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", str(e))


async def handle_get_quick_reference(request: GetQuickReferenceRequest) -> MCPResponse:
    """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–ø—Ä–∞–≤–∫—É."""
    _log_mcp_request("get_quick_reference", element_name=request.element_name, object_name=request.object_name)
    
    try:
        result = await search_service.get_detailed_syntax_info(
            request.element_name, 
            request.object_name, 
            include_examples=False
        )
        
        if not result:
            _log_mcp_success("get_quick_reference", count=0)
            return mcp_formatter.create_not_found_response(f"‚ö° –≠–ª–µ–º–µ–Ω—Ç '{request.element_name}'")
        
        text = mcp_formatter.format_quick_reference(result)
        
        _log_mcp_success("get_quick_reference", count=1)
        return mcp_formatter.create_success_response([{
            "type": "text",
            "text": text
        }])
        
    except Exception as e:
        _log_mcp_error("get_quick_reference", str(e))
        return mcp_formatter.create_error_response("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏", str(e))


async def handle_search_by_context(request: SearchByContextRequest) -> MCPResponse:
    """–ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É."""
    _log_mcp_request("search_by_context", query=request.query, context=request.context, 
                    object_name=request.object_name, limit=request.limit)
    
    try:
        results = await search_service.search_with_context_filter(
            request.query,
            request.context, 
            request.object_name,
            request.limit
        )
        
        if results.get("error"):
            _log_mcp_error("search_by_context", results["error"])
            return mcp_formatter.create_error_response("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞", results["error"])
        
        search_results = results.get("results", [])
        
        if not search_results:
            context_name = {"global": "–≥–ª–æ–±–∞–ª—å–Ω–æ–º", "object": "–æ–±—ä–µ–∫—Ç–Ω–æ–º", "all": "–ª—é–±–æ–º"}
            context_text = context_name.get(request.context, request.context)
            _log_mcp_success("search_by_context", count=0, context=request.context)
            return mcp_formatter.create_not_found_response(request.query, f"{context_text} –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
        
        text = mcp_formatter.format_context_search(search_results, request.query, request.context)
        
        _log_mcp_success("search_by_context", count=len(search_results), context=request.context)
        return mcp_formatter.create_success_response([{
            "type": "text",
            "text": text
        }])
        
    except Exception as e:
        _log_mcp_error("search_by_context", str(e))
        return mcp_formatter.create_error_response("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞", str(e))


async def handle_list_object_members(request: ListObjectMembersRequest) -> MCPResponse:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–∞."""
    _log_mcp_request("list_object_members", object_name=request.object_name, member_type=request.member_type, limit=request.limit)
    try:
        result = await search_service.get_object_members_list(
            request.object_name,
            request.member_type,
            request.limit
        )

        if result.get("error"):
            _log_mcp_error("list_object_members", result["error"])
            return mcp_formatter.create_error_response("–û—à–∏–±–∫–∞", result["error"])

        methods = result.get("methods", [])
        properties = result.get("properties", [])
        events = result.get("events", [])
        total = result.get("total", 0)

        if total == 0:
            _log_mcp_success("list_object_members", count=0)
            return mcp_formatter.create_not_found_response(f"–û–±—ä–µ–∫—Ç '{request.object_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

        text = mcp_formatter.format_object_members_list(
            request.object_name,
            request.member_type,
            methods,
            properties,
            events,
            total
        )

        _log_mcp_success("list_object_members", count=total)
        return mcp_formatter.create_success_response([{
            "type": "text",
            "text": text
        }])

    except Exception as e:
        _log_mcp_error("list_object_members", str(e))
        return mcp_formatter.create_error_response("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤", str(e))