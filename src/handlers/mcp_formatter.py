"""–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –æ—Ç–≤–µ—Ç–æ–≤ MCP."""

from typing import Dict, List, Any
from src.models.mcp_models import MCPResponse


class MCPResponseFormatter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ MCP."""
    
    @staticmethod
    def create_error_response(message: str, details: str = None) -> MCPResponse:
        """–°–æ–∑–¥–∞—ë—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π."""
        error_text = message
        if details:
            error_text += f": {details}"
        return MCPResponse(content=[], error=error_text)
    
    @staticmethod
    def create_not_found_response(query: str, context: str = "") -> MCPResponse:
        """–°–æ–∑–¥–∞—ë—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Å–ª—É—á–∞—è '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'."""
        if context:
            text = f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ '{context}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        else:
            text = f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        
        return MCPResponse(content=[{"type": "text", "text": text}])
    
    @staticmethod
    def create_success_response(content: List[Dict[str, str]]) -> MCPResponse:
        """–°–æ–∑–¥–∞—ë—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç."""
        return MCPResponse(content=content)
    
    @staticmethod
    def format_search_header(count: int, query: str) -> Dict[str, str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞."""
        return {
            "type": "text",
            "text": f"üìã **–ù–∞–π–¥–µ–Ω–æ:** {count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{query}\"\n"
        }
    
    @staticmethod
    def format_search_result(result: Dict[str, Any], index: int) -> Dict[str, str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞."""
        name = result.get("name", "")
        obj = result.get("object", "")
        description = result.get("description", "")
        
        text = f"{index}. **{name}**"
        if obj:
            text += f" ({obj} ‚Üí –ú–µ—Ç–æ–¥)" if obj != "Global context" else " (–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"
        
        if description:
            desc = description[:100] + "..." if len(description) > 100 else description
            text += f"\n   ‚îî {desc}"
        
        return {"type": "text", "text": text + "\n"}
    
    @staticmethod
    def format_syntax_info(result: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Å–ø—Ä–∞–≤–∫—É."""
        text = f"üîß **–¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –°–ü–†–ê–í–ö–ê:** {result.get('name', '')}"
        
        if result.get('object'):
            text += f" ({result['object']})"
        
        text += "\n\n"
        
        if result.get('description'):
            text += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\n   {result['description']}\n\n"
        
        if result.get('syntax_ru'):
            text += f"üî§ **–°–∏–Ω—Ç–∞–∫—Å–∏—Å:**\n   `{result['syntax_ru']}`\n\n"
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        parameters = result.get('parameters')
        if parameters and isinstance(parameters, list):
            text += "‚öôÔ∏è **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**\n"
            for param in parameters:
                if isinstance(param, dict):
                    required = " (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)" if param.get('required') else " (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)"
                    text += f"   ‚Ä¢ {param.get('name', '')} ({param.get('type', '')}){required}"
                    if param.get('description'):
                        text += f" - {param['description']}"
                    text += "\n"
            text += "\n"
        
        if result.get('return_type'):
            text += f"‚Ü©Ô∏è **–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:** {result['return_type']}\n\n"
        
        return text
    
    @staticmethod
    def format_quick_reference(result: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–ø—Ä–∞–≤–∫—É."""
        name = result.get('name', '')
        syntax = result.get('syntax_ru', '')
        description = result.get('description', '')
        
        text = "‚ö° **–ö–†–ê–¢–ö–ê–Ø –°–ü–†–ê–í–ö–ê**\n\n"
        
        if syntax:
            text += f"`{syntax}`\n"
        else:
            text += f"`{name}`\n"
        
        if description:
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            desc = description.split('.')[0] + '.' if '.' in description else description
            desc = desc[:100] + "..." if len(desc) > 100 else desc
            text += f"‚îî {desc}"
        
        return text
    
    @staticmethod
    def format_context_search(
        search_results: List[Dict[str, Any]], 
        query: str, 
        context: str
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞."""
        if context == "object":
            objects = {}
            for result in search_results:
                obj = result.get("object", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                if obj not in objects:
                    objects[obj] = []
                objects[obj].append(result)
            
            text = f"üéØ **–ü–û–ò–°–ö –í –ö–û–ù–¢–ï–ö–°–¢–ï:** {context}\n\n"
            text += f"–ù–∞–π–¥–µ–Ω–æ {len(search_results)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{query}\"\n\n"
            
            for obj, items in list(objects.items())[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 –æ–±—ä–µ–∫—Ç–æ–≤
                text += f"üì¶ **{obj}:**\n"
                for item in items[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç
                    name = item.get("name", "")
                    syntax = item.get("syntax_ru", "")
                    desc = item.get("description", "")
                    
                    text += f"   ‚Ä¢ {name}"
                    if syntax:
                        text += f" - `{syntax}`"
                    if desc:
                        short_desc = desc[:50] + "..." if len(desc) > 50 else desc
                        text += f"\n     {short_desc}"
                    text += "\n"
                text += "\n"
        else:
            text = f"üîç **–ü–û–ò–°–ö –í –ö–û–ù–¢–ï–ö–°–¢–ï:** {context}\n\n"
            text += f"–ù–∞–π–¥–µ–Ω–æ {len(search_results)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n\n"
            
            for i, result in enumerate(search_results[:8], 1):
                name = result.get("name", "")
                syntax = result.get("syntax_ru", "")
                text += f"{i}. **{name}**"
                if syntax:
                    text += f" - `{syntax}`"
                text += "\n"
        
        return text
    
    @staticmethod
    def format_quick_reference(result: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–ø—Ä–∞–≤–∫—É."""
        name = result.get('name', '')
        syntax = result.get('syntax_ru', '')
        description = result.get('description', '')
        
        text = "‚ö° **–ö–†–ê–¢–ö–ê–Ø –°–ü–†–ê–í–ö–ê**\n\n"
        
        if syntax:
            text += f"`{syntax}`\n"
        else:
            text += f"`{name}`\n"
        
        if description:
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            desc = description.split('.')[0] + '.' if '.' in description else description
            desc = desc[:100] + "..." if len(desc) > 100 else desc
            text += f"‚îî {desc}"
        
        return text

    @staticmethod
    def format_object_members_list(object_name: str, member_type: str, methods: list, 
                                 properties: list, events: list, total: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–∞."""
        text = f"üì¶ **–û–ë–™–ï–ö–¢:** {object_name}\n\n"
        
        # –ú–µ—Ç–æ–¥—ã
        if member_type in ["all", "methods"] and methods:
            text += f"üî® **–ú–µ—Ç–æ–¥—ã ({len(methods)}):**\n"
            for method in methods[:20]:  # –ú–∞–∫—Å–∏–º—É–º 20
                name = method.get("name", "")
                syntax = method.get("syntax_ru", "")
                desc = method.get("description", "")
                
                text += f"   ‚Ä¢ **{name}**"
                if syntax:
                    text += f" - `{syntax}`"
                if desc:
                    short_desc = desc[:80] + "..." if len(desc) > 80 else desc
                    text += f"\n     {short_desc}"
                text += "\n"
            text += "\n"
        
        # –°–≤–æ–π—Å—Ç–≤–∞
        if member_type in ["all", "properties"] and properties:
            text += f"üìã **–°–≤–æ–π—Å—Ç–≤–∞ ({len(properties)}):**\n"
            for prop in properties[:15]:  # –ú–∞–∫—Å–∏–º—É–º 15
                name = prop.get("name", "")
                desc = prop.get("description", "")
                
                text += f"   ‚Ä¢ **{name}**"
                if desc:
                    short_desc = desc[:60] + "..." if len(desc) > 60 else desc
                    text += f" - {short_desc}"
                text += "\n"
            text += "\n"
        
        # –°–æ–±—ã—Ç–∏—è
        if member_type in ["all", "events"] and events:
            text += f"‚ö° **–°–æ–±—ã—Ç–∏—è ({len(events)}):**\n"
            for event in events[:10]:  # –ú–∞–∫—Å–∏–º—É–º 10
                name = event.get("name", "")
                desc = event.get("description", "")
                
                text += f"   ‚Ä¢ **{name}**"
                if desc:
                    short_desc = desc[:60] + "..." if len(desc) > 60 else desc
                    text += f" - {short_desc}"
                text += "\n"
        
        return text


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞
mcp_formatter = MCPResponseFormatter()
