"""–¢–µ—Å—Ç 4: –°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞."""

import asyncio
import sys
import time
import pytest
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent.parent))

from src.core.elasticsearch import es_client
from src.search.search_service import search_service


@pytest.mark.asyncio
async def test_search():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞."""
    print("=== –¢–µ—Å—Ç 4: –°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ ===")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Elasticsearch
        connected = await es_client.connect()
        if not connected:
            print("‚ùå Elasticsearch –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
    
        test_queries = ["–°—Ç—Ä–î–ª–∏–Ω–∞", "–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π", "–î–æ–±–∞–≤–∏—Ç—å"]
    
        for query in test_queries:
            print(f"\nüîç –ü–æ–∏—Å–∫: '{query}'")
            
            start_time = time.time()
            results = await search_service.search_1c_syntax(query, limit=3)
            search_time = time.time() - start_time
            
            if results.get("error"):
                print(f"‚ùå –û—à–∏–±–∫–∞: {results['error']}")
                continue
            
            found = len(results.get("results", []))
            total = results.get("total", 0)
            reported_time = results.get("search_time_ms", 0)
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {found} –∏–∑ {total}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è: {reported_time}ms (—Ä–µ–∞–ª—å–Ω–æ–µ: {search_time*1000:.0f}ms)")
            
            if reported_time < 500:
                print("‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–π < 500ms –≤—ã–ø–æ–ª–Ω–µ–Ω")
            else:
                print("‚ö†Ô∏è –ü–æ–∏—Å–∫ –∑–∞–Ω—è–ª > 500ms")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for i, result in enumerate(results.get("results", []), 1):
                name = result.get("name", "")
                obj = result.get("object", "")
                score = result.get("_score", 0)
                print(f"   {i}. {name}" + (f" ({obj})" if obj else "") + f" [score: {score}]")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞: {e}")
        return False
    finally:
        await es_client.disconnect()


if __name__ == "__main__":
    asyncio.run(test_search())
