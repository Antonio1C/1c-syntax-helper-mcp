"""–¢–µ—Å—Ç 3: –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –≤ Elasticsearch."""

import asyncio
import sys
import time
import pytest
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))

from src.core.config import settings
from src.core.elasticsearch import es_client
from src.parsers.hbk_parser import HBKParser
from src.parsers.indexer import indexer


@pytest.mark.asyncio
async def test_indexing():
    """–¢–µ—Å—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."""
    print("=== –¢–µ—Å—Ç 3: –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –≤ Elasticsearch ===")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Elasticsearch
        connected = await es_client.connect()
        if not connected:
            print("‚ùå Elasticsearch –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        # –ü–∞—Ä—Å–∏–º .hbk —Ñ–∞–π–ª
        hbk_dir = Path(settings.data.hbk_directory)
        hbk_files = list(hbk_dir.glob("*.hbk"))
        
        if not hbk_files:
            print("‚ùå .hbk —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        parser = HBKParser()
        parsed_hbk = parser.parse_file(str(hbk_files[0]))
        
        if not parsed_hbk or not parsed_hbk.documentation:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
            return False
        
        print(f"üìö –ì–æ—Ç–æ–≤–æ –∫ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {len(parsed_hbk.documentation)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
        start_time = time.time()
        success = await indexer.reindex_all(parsed_hbk)
        index_time = time.time() - start_time
        
        if success:
            docs_count = await es_client.get_documents_count()
            print(f"‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:")
            print(f"   ‚Ä¢ –í—Ä–µ–º—è: {index_time:.2f} —Å–µ–∫")
            print(f"   ‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ: {docs_count}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if index_time < 120:
                print("‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–π < 2 –º–∏–Ω—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω")
            else:
                print("‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ > 2 –º–∏–Ω—É—Ç")
                
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    finally:
        await es_client.disconnect()


if __name__ == "__main__":
    asyncio.run(test_indexing())
