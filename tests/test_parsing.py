"""–¢–µ—Å—Ç 2: –ü–∞—Ä—Å–∏–Ω–≥ .hbk —Ñ–∞–π–ª–∞."""

import asyncio
import sys
import pytest
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent.parent))

from src.core.config import settings
from src.parsers.hbk_parser import HBKParser


@pytest.mark.asyncio
async def test_hbk_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ .hbk —Ñ–∞–π–ª–∞."""
    print("=== –¢–µ—Å—Ç 2: –ü–∞—Ä—Å–∏–Ω–≥ .hbk —Ñ–∞–π–ª–∞ ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ 7zip (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –ø–∞—Ä—Å–µ—Ä)
    import subprocess
    zip_commands = [
        '7z',           # –í PATH
        '7z.exe',       # –í PATH  
        '7za',          # –í PATH (standalone –≤–µ—Ä—Å–∏—è)
        '7za.exe',      # –í PATH (standalone –≤–µ—Ä—Å–∏—è)
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ Windows
        'C:\\Program Files\\7-Zip\\7z.exe',
        'C:\\Program Files (x86)\\7-Zip\\7z.exe',
    ]
    
    zip_available = False
    working_7z = None
    
    for cmd in zip_commands:
        try:
            result = subprocess.run([cmd], capture_output=True, timeout=5)
            if result.returncode == 0 or b'Igor Pavlov' in result.stdout or b'7-Zip' in result.stdout:
                zip_available = True
                working_7z = cmd
                break
        except (subprocess.TimeoutExpired, FileNotFoundError, subprocess.SubprocessError):
            continue
    
    if not zip_available:
        print("‚ö†Ô∏è 7-Zip –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω.")
        print("üìã –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 7-Zip: https://www.7-zip.org/")
        pytest.skip("7-Zip –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
    else:
        print(f"‚úÖ 7-Zip –Ω–∞–π–¥–µ–Ω: {working_7z}")
    
    try:
        # –ò—â–µ–º .hbk —Ñ–∞–π–ª
        hbk_dir = Path(settings.data.hbk_directory)
        hbk_files = list(hbk_dir.glob("*.hbk"))
        
        if not hbk_files:
            print(f"‚ùå .hbk —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {hbk_dir}")
            return False
        
        hbk_file = hbk_files[0]
        print(f"üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {hbk_file}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {hbk_file.stat().st_size / 1024 / 1024:.1f} –ú–ë")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å –≤—ã–≤–æ–¥–æ–º –ø—É—Ç–µ–π —Ñ–∞–π–ª–æ–≤
        class HBKParserWithLogging(HBKParser):
            def _create_document_from_html(self, entry, result):
                print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤–µ: {entry.path}")
                return super()._create_document_from_html(entry, result)
        
        # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        parser = HBKParserWithLogging(max_files_per_type=3, max_total_files=50)
        parsed_hbk = parser.parse_file(str(hbk_file))
        
        if not parsed_hbk:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞")
            assert False, "–ü–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª None"
        
        print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω:")
        print(f"   ‚Ä¢ –ó–∞–ø–∏—Å–µ–π –≤ –∞—Ä—Ö–∏–≤–µ: {parsed_hbk.file_info.entries_count}")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ HTML —Ñ–∞–π–ª–æ–≤: {parsed_hbk.stats.get('html_files', 0)}")
        print(f"   ‚Ä¢ –§–∞–π–ª–æ–≤ –º–µ—Ç–æ–¥–æ–≤: {parsed_hbk.stats.get('global_methods_files', 0)}")
        print(f"   ‚Ä¢ –§–∞–π–ª–æ–≤ —Å–æ–±—ã—Ç–∏–π: {parsed_hbk.stats.get('global_events_files', 0)}")
        print(f"   ‚Ä¢ –§–∞–π–ª–æ–≤ Global context: {parsed_hbk.stats.get('global_context_files', 0)}")
        print(f"   ‚Ä¢ –§–∞–π–ª–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤: {parsed_hbk.stats.get('object_constructors_files', 0)}")
        print(f"   ‚Ä¢ –§–∞–π–ª–æ–≤ —Å–æ–±—ã—Ç–∏–π –æ–±—ä–µ–∫—Ç–æ–≤: {parsed_hbk.stats.get('object_events_files', 0)}")
        print(f"   ‚Ä¢ –§–∞–π–ª–æ–≤ –¥—Ä—É–≥–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {parsed_hbk.stats.get('other_object_files', 0)}")
        print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ HTML: {parsed_hbk.stats.get('processed_html', 0)}")
        print(f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(parsed_hbk.documentation)}")
        print(f"   ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(parsed_hbk.categories)}")
        print(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {len(parsed_hbk.errors)}")
        
        categories_processed = parsed_hbk.stats.get('categories_processed', {})
        found_types = parsed_hbk.stats.get('found_types', {})
        print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        print(f"     - –ú–µ—Ç–æ–¥—ã: {categories_processed.get('global_methods', 0)}")
        print(f"     - –°–æ–±—ã—Ç–∏—è: {categories_processed.get('global_events', 0)}")
        print(f"     - Global context: {categories_processed.get('global_context', 0)}")
        print(f"     - –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã: {categories_processed.get('object_constructors', 0)}")
        print(f"     - –°–æ–±—ã—Ç–∏—è –æ–±—ä–µ–∫—Ç–æ–≤: {categories_processed.get('object_events', 0)}")
        print(f"     - –î—Ä—É–≥–∏–µ –æ–±—ä–µ–∫—Ç—ã: {categories_processed.get('other_objects', 0)}")
        print(f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –ø–æ —Ç–∏–ø–∞–º:")
        for doc_type, count in found_types.items():
            if count > 0:
                print(f"     - {doc_type}: {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞
        if len(parsed_hbk.documentation) == 0:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞!")
            assert False, "–ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –∏–∑–≤–ª–µ–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ .hbk —Ñ–∞–π–ª–∞"
            
        if len(parsed_hbk.errors) > 0:
            print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:")
            for error in parsed_hbk.errors[:3]:
                print(f"   ‚Ä¢ {error}")
            # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ –Ω–µ –ø–∞–¥–∞—Ç—å

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        expected_types = {
            'GLOBAL_FUNCTION', 'GLOBAL_PROCEDURE', 'GLOBAL_EVENT',
            'OBJECT_FUNCTION', 'OBJECT_PROCEDURE', 
            'OBJECT_PROPERTY', 'OBJECT_EVENT', 'OBJECT_CONSTRUCTOR',
            'OBJECT'
        }
        
        found_types = set()
        for doc in parsed_hbk.documentation:
            found_types.add(doc.type.name)
        
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:")
        for doc_type in sorted(found_types):
            count = sum(1 for doc in parsed_hbk.documentation if doc.type.name == doc_type)
            print(f"   ‚Ä¢ {doc_type}: {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ–Ω—ã –æ–∂–∏–¥–∞–µ–º—ã–µ —Ç–∏–ø—ã
        found_expected = found_types.intersection(expected_types)
        if found_expected:
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω—ã –æ–∂–∏–¥–∞–µ–º—ã–µ —Ç–∏–ø—ã: {sorted(found_expected)}")
        else:
            print(f"\n‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤: {sorted(expected_types)}")
        
        print(f"\n‚úÖ –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –ü–†–û–ô–î–ï–ù: {len(parsed_hbk.documentation)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if parsed_hbk.documentation:
            print("\n–ü—Ä–∏–º–µ—Ä –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
            for i, doc in enumerate(parsed_hbk.documentation[:5], 1):
                print(f"   {i}. {doc.name} ({doc.type.name}) - {doc.object or '–≥–ª–æ–±–∞–ª—å–Ω—ã–π'}")
        
        if parsed_hbk.errors:
            print(f"\n–û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:")
            for error in parsed_hbk.errors[:3]:
                print(f"   ‚Ä¢ {error}")
        
        # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        assert False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}"


if __name__ == "__main__":
    asyncio.run(test_hbk_parsing())
