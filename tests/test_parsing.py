"""–¢–µ—Å—Ç 2: –ü–∞—Ä—Å–∏–Ω–≥ .hbk —Ñ–∞–π–ª–∞."""

import asyncio
import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))

from src.core.config import settings
from src.parsers.hbk_parser import HBKParser


async def test_hbk_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ .hbk —Ñ–∞–π–ª–∞."""
    print("=== –¢–µ—Å—Ç 2: –ü–∞—Ä—Å–∏–Ω–≥ .hbk —Ñ–∞–π–ª–∞ ===")
    
    try:
        # –ò—â–µ–º .hbk —Ñ–∞–π–ª
        hbk_dir = Path(settings.data.hbk_directory)
        hbk_files = list(hbk_dir.glob("*.hbk"))
        
        if not hbk_files:
            print(f"‚ùå .hbk —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {hbk_dir}")
            return False
        
        hbk_file = hbk_files[0]
        print(f"üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {hbk_file}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {hbk_file.stat().st_size / 1024 / 1024:.1f} –ú–ë")
        
        # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª
        parser = HBKParser()
        parsed_hbk = parser.parse_file(str(hbk_file))
        
        if not parsed_hbk:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞")
            return False
        
        print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ:")
        print(f"   ‚Ä¢ –ó–∞–ø–∏—Å–µ–π –≤ –∞—Ä—Ö–∏–≤–µ: {parsed_hbk.file_info.entries_count}")
        print(f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(parsed_hbk.documentation)}")
        print(f"   ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(parsed_hbk.categories)}")
        print(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {len(parsed_hbk.errors)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if parsed_hbk.documentation:
            print("\n–ü—Ä–∏–º–µ—Ä –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
            for i, doc in enumerate(parsed_hbk.documentation[:3], 1):
                print(f"   {i}. {doc.name} ({doc.type.value})")
        
        if parsed_hbk.errors:
            print(f"\n–û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:")
            for error in parsed_hbk.errors[:3]:
                print(f"   ‚Ä¢ {error}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return False


if __name__ == "__main__":
    asyncio.run(test_hbk_parsing())
